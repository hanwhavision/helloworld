name: mopl user-app android
run-name: User-app-android R${{ github.run_number }} with branch ${{ github.ref_name }} üöÄ
on:
  workflow_dispatch:
    inputs:
      REPO_NAME:
        description: 'ÎπåÎìúÌï† Ï†ÄÏû•ÏÜåÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.'
        required: true
        default: 'user-app'
        type: choice
        options:
        - user-app
      REPO_BRANCH:
        description: 'ÎπåÎìúÌï† Ï†ÄÏû•ÏÜåÏùò Î∏åÎûúÏπòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.'
        required: true
        default: 'main'
        type: choice
        options:
        - develop
        - qa
        - main
        - cicd-test
      QUALITY_REPORT:
        description: 'ÏÜåÏä§ÏΩîÎìú ÌíàÏßàÏßÄÌëú (Ï†ïÏ†ÅÎ∂ÑÏÑù)ÏùÑ ÏÇ∞Ï∂ú Ìï©ÎãàÎã§.'
        type: boolean
        required: true
        default: true
      DEPLOY:
        required: true
        default: 'development'
        type: choice
        options:
        - Development
        - Stable        

jobs:
  mopl-user-app:
    runs-on: ubuntu-latest

    permissions:
      deployments: write

    env:
      CIM_SERVER: "cim.kdoggy.systems"
      BUILD_PATH: ./${{ inputs.REPO_NAME }}

    steps:
      - run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "github.job: ${{ github.job }}"
          echo "REPO_NAME: $REPO_NAME"
          echo "QUALITY_REPORT: $QUALITY_REPORT"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE" #/__w/helloworld/helloworld
        env:
          REPO_NAME: ${{ inputs.REPO_NAME }}
          QUALITY_REPORT: ${{ inputs.QUALITY_REPORT }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io/hanwhavision
          username: jenkins
          password: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Install CSA
        uses: shrink/actions-docker-extract@v3
        with:
          image: "ghcr.io/hanwhavision/coverity-github:1.0.0"
          path: "/home/jenkins/cov-analysis"
          destination: "${GITHUB_WORKSPACE}/cov-analysis" 

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          repository: backend-sw-development-team4/${{ inputs.REPO_NAME }}
          ref: ${{ inputs.REPO_BRANCH }}
          path: ${{ env.BUILD_PATH }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Node  
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Run Yarn Install
        run: |
             pwd
             cd ${GITHUB_WORKSPACE}
             pwd
             yarn install   
             
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: ${{ inputs.DEPLOY }}     

      - name: coverity
        if: inputs.QUALITY_REPORT == true
        run: |
          echo "CI_STEP_StaticAnalysis"
          echo $ANDROID_HOME
          CSA_DIR=${GITHUB_WORKSPACE}/cov-analysis
          COVERITY_CONFIG=${GITHUB_WORKSPACE}/coverity_config
          COVERITY_CONFIG_XML=${GITHUB_WORKSPACE}/coverity_config/config.xml
          COVERITY_INTERMEDIATE=${GITHUB_WORKSPACE}/coverity_emit_data
          CIM_USER=stream_account
          CIM_PASSWD=stream
          STREAM="${{ inputs.REPO_NAME }}_android"

          mkdir $COVERITY_CONFIG
          mkdir $COVERITY_INTERMEDIATE

          ${CSA_DIR}/bin/cov-configure --config ${COVERITY_CONFIG_XML} --java
          ${CSA_DIR}/bin/cov-configure --config ${COVERITY_CONFIG_XML} --kotlin

          
          APP_REVISION=`git rev-parse --short HEAD`;
          cd ./android
          ${CSA_DIR}/bin/cov-build --config ${COVERITY_CONFIG_XML} --dir ${COVERITY_INTERMEDIATE} ./gradlew build
          ${CSA_DIR}/bin/cov-analyze --aggressiveness-level high --all --dir ${COVERITY_INTERMEDIATE} --wait-for-license
          cov_commit="${CSA_DIR}/bin/cov-commit-defects --url https://${CIM_USER}:${CIM_PASSWD}@${{ env.CIM_SERVER }} --ssl --stream ${STREAM} --dir ${COVERITY_INTERMEDIATE} --version ${APP_REVISION}";

          max_try_count=10;
          while ! ${cov_commit} && [ $max_try_count -ne 0 ]; do
              echo "Remaining  try-count : ${max_try_count}";
              max_try_count=$((max_try_count-1)); 
              sleep 120;
              if [ $max_try_count -eq "0" ] ; then
                  echo "fail cov-commit";
                  exit 1;
              fi
          done
        working-directory: ${{ env.BUILD_PATH }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'
